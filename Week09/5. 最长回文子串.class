class Solution {
    public String longestPalindrome(String s) {
        int len = s.length();
        if(len<2)
            return s;
        String str = addBoundaries(s, '#');
        int sLen = 2 * len + 1;
        int[] p = new int[sLen];
        int maxRight = 0;
        int center = 0;
        int maxLen = 1;
        int start = 0;

        for(int i = 0; i < sLen; i++){
            if(i < maxRight){
                int mirror = 2 * center - i;
                p[i] = Math.min(maxRight - i, p[mirror]);
            }
            int left = i - (1 + p[i]);
            int right = i + (1 + p[i]);

            while(left >= 0 && right < sLen && str.charAt(left) == str.charAt(right)){
                p[i]++;
                left--;
                right++;
            }
            if(i + p[i] > maxLen){
                maxRight = i + p[i];
                center = i;
            }
            if(p[i] > maxLen){
                maxLen = p[i];
                start = (i - maxLen) / 2;
            }
        }
        return s.substring(start, start + maxLen);
    }
    private String addBoundaries(String s, char divide){
        int len = s.length();
        if(len == 0)
            return "";
        if(s.indexOf(divide)!=-1){
            throw new IllegalArgumentException("参数错误，您传递的分割字符，在输入字符串中存在！");}
        StringBuilder stringBuilder = new StringBuilder();
        for(int i = 0; i < len; i++){
            stringBuilder.append(divide);
            stringBuilder.append(s.charAt(i));
        }
        stringBuilder.append(divide);
        return stringBuilder.toString();
    }
}